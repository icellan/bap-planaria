"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.BAP=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_simplSchema=_interopRequireDefault(require("simpl-schema")),_collection=require("../lib/collection"),_attest=require("../attest"),_id=require("../id"),BAP=new _collection.Collection("bap",new _simplSchema["default"]({block:{type:_simplSchema["default"].Integer,label:"Block number this transaction was mined into - null if still in mempool",optional:!0},type:{type:String,label:"Type of BAP transaction (ID, ATTEST, DATA, ALIAS, ...)",optional:!1},hash:{type:String,label:"ID key or attestation hash",optional:!1},sequence:{type:String,label:"Sequences number of the attestation, or the address of the ID",optional:!1},signatureAddress:{type:String,label:"Bitcoin address this bap transaction was signed with",optional:!1},data:{type:String,label:"Optional data that was appended to this BAP transaction",optional:!0},timestamp:{type:_simplSchema["default"].Integer,label:"timestamp the transaction was broadcast - if available",optional:!0},processed:{type:Boolean},error:{type:String}}));exports.BAP=BAP,BAP.after("updateOne",function(){var a=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function a(b,c,d){var e;return _regenerator["default"].wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!(!0===d.upsert&&c.$set&&c.$set.type&&c.$set.hash&&c.$set.sequence&&c.$set.signatureAddress)){a.next=34;break}if(a.prev=1,e=c.$set.type,"ATTEST"!==e){a.next=8;break}return a.next=6,(0,_attest.handleAttestationTransaction)(c.$set);case 6:a.next=26;break;case 8:if("ID"!==e){a.next=13;break}return a.next=11,(0,_id.handleIDTransaction)(c.$set);case 11:a.next=26;break;case 13:if("REVOKE"!==e){a.next=18;break}return a.next=16,(0,_attest.handleRevokeTransaction)(c.$set);case 16:a.next=26;break;case 18:if("ALIAS"!==e){a.next=23;break}return a.next=21,(0,_id.handleAliasTransaction)(c.$set);case 21:a.next=26;break;case 23:if("DATA"!==e){a.next=26;break}return a.next=26,(0,_attest.handleDataTransaction)(c.$set);case 26:return a.next=28,BAP.update({_id:b._id},{$set:{processed:!0}});case 28:a.next=34;break;case 30:return a.prev=30,a.t0=a["catch"](1),a.next=34,BAP.update({_id:b._id},{$set:{error:JSON.stringify(a.t0,Object.getOwnPropertyNames(a.t0))}});case 34:case"end":return a.stop();}},a,null,[[1,30]])}));return function(){return a.apply(this,arguments)}}());